/*  
File:          SecondLife Anim Exporter
Author:        S Patterson
Last Updated:  2016-02-12

Copyright (C) 2016-2021 by Samantha Patterson <circle(at)deeptht(dot)armory(dot)com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

//**************My system auto-finds this file.  If yours does not, you will need to locate
//filebrowse.mel, uncomment the following line, and chang ethe FILEBROWSEPATH to match the 
//directory you are using.
//source "FILEBROWSEPATH/filebrowse.mel"


/*Generates an intermediate file from maya for the 
    the 1.0 .anim format of second life animations.

    MEL is extremely limited when it comes to writing binary files and is 
    unable ot produce the the SL .anim format directly.  This application
    creates and intermediate file which is then easily reprocessed into the 
    appropriate format by a compiled cmdln program.
*/

global int $POS=1;
global int $ROT=2;

//Global variables c for 'Character String', h for Handle.
global int $ghFile;				//File handle.
global string $ghFilename;			//Screen component for filename
global string $gcFilename="MyFile.anim";		//Default file name.
global string $gcPrefsFile;
$gcPrefsFile=`internalVar -userPrefDir` + "slanim_export_prefs.mel";
global int $giFrameNo;				//Frame number being processed.

//Interface variables.
global int $giJointSelect=0;		//Use toplevel joint as root.
global int $giRangeSelect=0;		//Timerange to use.  0=all.  1=selected.
global int $giRange[2];			    //If not using all, use this range.
global int $giFPS=30;		        //The FPS of the animation.
global int $giBaseTranslation=1;	//Default to World orientation.
global int $giBaseRotation=1;		//Default to World rotation.
global int $giPickRoot=0;		//Not in root-pick mode.
global int $giPickMode=0;		//Store the original pickroot mode here.

global int $giNumFrames;            //Number of frames in exported sequence.
global int $giFPS;                  //FPS of the animated sequence.
global float $gfDuration;           //Duration of the sequence in seconds

global int $giPriority;             //Overall joint priority for animation.
global int $giLoop[3];              //Loop in and out points
global float $gfEase[2];            //Ease in and out durations.

global string  $gsRootJoint;            //The root joint of the skeleton.
global string $gsJointNames[300]; //The joints in the skeleton
global int $giNumJoints=0;              //Number of joints in skeleton

//Who needs structs?  Who needs classes?  We have globals!
//I feel dirty writing code this way.  Damn you MEL.  Damn you.
global int $giNumActiveJoints;          //Joints that have motion.
global int $giActiveJointRotCount[300];
global int $giActiveJointPosCount[300];
global int $giActiveJointPriority[300];
global int $giActiveJointList[300];
global float $gfNextPos[], $gfNextRot[];    //I'm so ugly!  Don't look at me!

//Handles to controls.
global string $ghRangeStart="", $ghRangeEnd="", $ghWindow="",$ghHelpWin="";
global string $ghFPS="", $ghRotate="", $ghTranslate="", $ghPickRoot;
global string $ghLoop[3];

$giRange[0]=1;
$giRange[1]=1;
$giLoop[0]=1;
$giLoop[1]=2;

////////////////////////////////////////////////////////////////////////////////
//  Preferences File IO
////////////////////////////////////////////////////////////////////////////////

//WritePrefFile opens the file defined by gcPrefsFile and writes out 
//global variables that contain important configuration settings.
//These lines are read and evaluated by ReadPrefs, so in this way the
//file is both human-readable and easily expandable.
global proc WritePrefFile ( ) {
   global string $gcPrefsFile;		//Where to load prefs from.
   int $lhFile;				//File handle.

   global string $gcFilename;		//Output file name.
   global string $gcShortFilename;	//Output file name with path removed.
   global int $giJointSelect;		//Use toplevel joint as root.
   global int $giRangeSelect;		//Use all.
   global int $giRange[2];		//If not using all, use this range.
   global int $giFPS;
   global int $giBaseTranslation;	//Default to World orientation.
   global int $giBaseRotation;		//Default to World rotation.
   global string $ghFilename, $ghTranslate, $ghRotate;
   global string $gcMajorMenu, $gcMinorMenu;
   global int $giLoop[3];

   $lhFile = `fopen $gcPrefsFile "w"`;	//Open file.

   //****Update variables with current settings.
   $gcFilename = `textField -query -text $ghFilename`;
   $giPickMode=`selectMode -q -root`;
   $giBaseTranslation = `radioButtonGrp -q -select $ghTranslate`;
   $giBaseRotation    = `radioButtonGrp -q -select $ghRotate`;

   //****Write variables to file.
   WriteVar($lhFile, "string","$gcFilename",     $gcFilename);
   WriteVar($lhFile, "int", "$giJointSelect",     (string)$giJointSelect);
   WriteVar($lhFile, "int", "$giRangeSelect",     (string)$giRangeSelect);
   WriteVar($lhFile, "int", "$giRange[0]",        (string)$giRange[0]);
   WriteVar($lhFile, "int", "$giRange[1]",        (string)$giRange[1]);
   WriteVar($lhFile, "int", "$giFPS",    (string)$giFPS);
   WriteVar($lhFile, "int", "$giLoop[0]",        (string)$giLoop[0]);
   WriteVar($lhFile, "int", "$giLoop[1]",        (string)$giLoop[1]);
   WriteVar($lhFile, "int", "$giLoop[2]",        (string)$giLoop[2]);
   WriteVar($lhFile, "int", "$giBaseTranslation", (string)$giBaseTranslation);
   WriteVar($lhFile, "int", "$giBaseRotation",    (string)$giBaseRotation);
   WriteVar($lhFile, "string","$gcMajorMenu",     $gcMajorMenu);
   WriteVar($lhFile, "string","$gcMinorMenu",     $gcMinorMenu);

   fclose $lhFile;				//Close file.
}

//WriteVar writes a line to the preference file using the type,variable, and
//value parameters passed into it.
global proc WriteVar ( int $phFile, string $psType, 
                       string $psVar, string $psVal) {
   if ($psType == "string") {  		//For strings, add quotes.
      $psVal = "\"" + $psVal + "\"";
   }

   //string $lsOutput="global " + $psType + " " + $psVar + "=" + $psVal + ";\r";
   string $lsOutput="global " + $psType + " " + $psVar + ";\r" +  $psVar + "=" + $psVal + ";\r";
   fprint $phFile $lsOutput;
}
   
//ReadPrefFile opens the file defined by gcPrefsFile and reads the the
//contents of it.  For simplicity and future expandibility, this file
//simply contains variable assignments which are read in and eval'd.
global proc ReadPrefFile ( ) {
   global string $gcPrefsFile;		//Where to load prefs from.
   int $lhFile;				//File handle.

   if (`filetest -s $gcPrefsFile`) {	//File exists.
      $lhFile = `fopen $gcPrefsFile "r"`;	//Open file.

      while (!feof($lhFile)) {			//Read lines.
         eval(`fgetline $lhFile`);		//Evaluate lines.
      }
      fclose $lhFile;				//Close file.
   }
      
}

////////////////////////////////////////////////////////////////////////////////
//  File generation routines
////////////////////////////////////////////////////////////////////////////////
//PickRoot sets the select mode to pick the root of the hierarchy.
global proc PickRoot() {
   global int $giPickRoot;		//Not in root-pick mode.
   global int $giPickMode;		//Store the original pickroot mode here.
   global string $ghPickRoot;		//Handle to PickRoot button.

   if ($ghPickRoot=="") return;		//Control not initialized.  Bail.

   if ($giPickRoot==0) {		//Not in root picking mode.
      $giPickMode=`selectMode -q -root`;	//Get current value to restore later.
      selectMode -root;
      $giPickRoot=1;
      button -edit -label "Done" $ghPickRoot;
   } else {
      if ($giPickMode==0) {
         selectMode -object;
      }
      $giPickRoot=0;
      button -edit -label "Pick" $ghPickRoot;
   }
}
      
//Called by RecurseNodeTree puts joints into list
global proc StoreJointName ( string $psNode )
{
    global string $gsJointNames[];
    global int $giNumJoints;

    print("Storing joint " + $psNode + "\n");
    $gsJointNames[$giNumJoints] = $psNode;
    $giNumJoints++;
}

//FindRootJoint climbs from the current node up the node tree to the trunk.
//Returns the name of the root bone node.  This routine can start at any 
//object which is a child of the root node and will stop at the toplevel 
//joint.

global proc string FindRootJoint ( string $psNode ) {
   string $lsOutNode;

   $lsOutNode = $psNode;		//Initialize while loop.

   int $iJoint=0;			//Looking for parent that is a joint.
   if (`objectType -isType joint $lsOutNode`) { 
      $iJoint++;
   }
   string $lsParent[] = `listRelatives -p $lsOutNode`;

   //Loop while type is joint or looking for a joint.
   while ($lsParent[0] != "" && (`objectType -isType joint $lsParent[0]` || $iJoint==0)) {
      if (`objectType -isType joint $lsParent[0]`) {
         $iJoint++;			//Increment bone counter.
         $lsOutNode = $lsParent[0];	//Identify current toplevel bone.
      }
      $lsParent = `listRelatives -p $lsParent[0]`;
   }
   return $lsOutNode;
}

//RecurseNodeTree looks at the children of this level object and does 'stuff'
//with it.  (stuff is a callback function to be executed via eval.)
//This routine is called recursively to navigate the object tree.
global proc RecurseNodeTree ( string $psNode, string $psStuff ) {
   string $lsNodes[];
   string $lsAttrib;

   //Evaluate callback function for this level.
   string $lsCmd= $psStuff + "\"" + $psNode + "\"";
   eval $lsCmd;

   string $lsChildren[] = `listRelatives -c $psNode`;

   for ($lsChild in $lsChildren) {
      if (`objectType -isType joint $lsChild`) {	//Only recurse joints.
         RecurseNodeTree ($lsChild, $psStuff);
      }
   }
}
   
//Generate time relative to start of sequence 
global proc float FrameToTime(int $frameno)
{
    global int $giNumFrames, $giRange[2];
    global float $gfDuration;

    float $relative =  ( (float)($frameno - $giRange[0]) / (float)$giNumFrames ) * $gfDuration;
    return $relative;
}

global proc float[] getRotation( string $psNode )
{
    global string $gsRootJoint;

    float $rot[];

    string $roto=`xform -q -roo $psNode`;	//Get rotate order

    xform -p true -roo "xyz" $psNode;		//Force to  XYZ rotate order.

    if ($gsRootJoint==$psNode)                //Use world space for root joint rotations.
    {
        $rot=`xform -ws -q -ro $psNode`; 	//Get rotation.
    } 
    else 
    {
        $rot=`xform -os -q -ro $psNode`; 	//Get rotation.
    }

    xform -p true -roo $roto $psNode;		//Return to current orient.

    return $rot;
}

//Comparing floats is apparently stupid in Maya and we don't need 64-bit precision anyhow. 
global proc int closeTo ( float $a, float $b )
{
    float $diff;

    if ($a > $b)
    {
        $diff = ( $a - $b );
    }
    else
    {
        $diff = ( $b - $a );
    }

    if ( $diff < 0.00005 )
    {
        return 1;
    }
    return 0;
}

//Finds the next frame where this node has a change in position or rotation.
//Returns frameno and keys changed
//SPATTERS TODO reduce linear keys to start and end.
global proc int[] FindNextChange ( string $psNode, int $current_frame, int $types )
{
    global int $giRange[];
    global int $ROT, $POS;
    global float $gfNextPos[], $gfNextRot[];
    
    int $result[2];
    $result[0] = -1;
    $result[1] = 0;

    currentTime $current_frame;     //Go to current frame.

    float $spos[]=`xform -r -os -q -t $psNode`; 
    float $srot[]=getRotation($psNode);

    int $i;
    for ( $i=$current_frame+1; $i < $giRange[1]; $i++ )
    {
        currentTime $i;

        //YOU SUCK MEL!
        //SPATTERS FIX PRP float $nextpos[]=`xform -r -os -q -t $psNode`; 
        float $nextrot[]=getRotation($psNode);

        //MEL AM TOO DUMB REUSE ARRAY YOU FIX FOR MEL
        for($j=0;$j<3;$j++)
        {
            //SPATTERS FIX PRP $gfNextPos[$j] = $nextpos[$j];
            $gfNextRot[$j] = $nextrot[$j];
        }   
        //Kiss my grits.

        if ($psNode=="mShoulderRight")
        {
           print("Src Frame:  " + $current_frame + " ROT: " + $srot[0] + ", " + $srot[1] + ", " + $srot[2] + " Cur Frame: " + $i + " ROT: " + $gfNextRot[0] + ", " + $gfNextRot[1] + ", " + $gfNextRot[2] + "\n");
        }

        //SPATTERS uncomment after fixing parent relative rotations
        /*
        if ( $spos[0] != $gfNextPos[0] ||
             $spos[1] != $gfNextPos[1] ||
             $spos[2] != $gfNextPos[2] )
        { 
            $result[1] = $POS;
        }
        */
        
        if(  closeTo( $srot[0],  $gfNextRot[0]) ||
             closeTo( $srot[1],  $gfNextRot[1]) ||
             closeTo( $srot[2],  $gfNextRot[2]) )
        {
            $result[1] = $ROT; //SPATTERS chante to += after fixing PRP.
        }

        if ($result[1] > 0)
        {
            //No unary operators either?  REALLY  AUGH.
            if ( ( $types == ($POS+$ROT) ) || 
                 ( $types == $ROT && $result[1] == $ROT ) || 
                 ( $types == $POS && $result[1] == $POS ) )
            {
                print ("Found a change in " + $psNode +  " result is " + $result[1] + "\n");
                $result[0] = $i;
                return $result;
            }
        }
    }
    return $result;
}

//Finds the active joints.
//Populates global giActiveJointList
//Counts rotation and position changes on each joint
//Oh if only Mel had structures and dynamic arrays.
global proc int GetActiveJoints()
{
    global string $gsJointNames[];
    global int $POS, $ROT;
    global int $giRange[];
    global int $giPriority;
    global int $giNumJoints, $giNumActiveJoints, $giActiveJointRotCount[], $giActiveJointPosCount[], $giActiveJointList[], $giActiveJointPriority[];

    $giNumActiveJoints=0;

    int $i;
    int $active=0;

    //Loop through joints.
    for ( $i=0; $i < $giNumJoints; $i++ )
    {
print ("Looking for change in " + $gsJointNames[$i] + "\n");
        //SPATTERS change back to POS+ROT when parent relative maths done.
        //int $change[] = FindNextChange( $gsJointNames[$i], $giRange[0], ($POS+$ROT) );
        int $change[] = FindNextChange( $gsJointNames[$i], $giRange[0], ($ROT) );

        string $lsNode = $gsJointNames[$i];

        //If this joint has motion, do something with it.
        if ($change[0] != -1)
        {
            $giActiveJointList[$giNumActiveJoints] = $i; //Found an active joint.
            $active=$giNumActiveJoints;
            $giNumActiveJoints++;
            $giActiveJointRotCount[$active] = 0;
            $giActiveJointPosCount[$active] = 0;
            if (`attributeExists "priority" $lsNode`) 
            {
                $giActiveJointPriority[$active]  = `getAttr $lsNode.priority`;
            }
            else
            {
                $giActiveJointPriority[$active] = $giPriority;  //SPATTERS should be base or 0?
            }

            //Count up the active rotations and positions.
            do
            {
                if ($change[1] == $POS || $change[1] == ($POS+$ROT))
                {
                    //Can't do ++ on arrays MEL?  REALLY?  
                    $giActiveJointPosCount[$active] = $giActiveJointPosCount[$active] + 1;
                }
                if ($change[1] == $ROT || $change[1] == ($POS+$ROT))
                {
                    $giActiveJointRotCount[$active] = $giActiveJointRotCount[$active] + 1;
                }
                //SPATTERS fix parent relative positions and re-enable.
                //int $change2[] = FindNextChange( $lsNode, $change[0], ($POS+$ROT) );
                int $change2[] = FindNextChange( $lsNode, $change[0], ($ROT) );
     
                //WHY YOU SO STUPID MEL?
                $change[0] = $change2[0];
                $change[1] = $change2[1];
            }
            while ($change[0] != -1);

print ("JOINT " + $gsJointNames[$i] + " is active with " + $giActiveJointRotCount[$active] + " rotations and " + $giActiveJointPosCount[$active] + " positions.\n");
        }
    }
    return $giNumActiveJoints;
}

global proc string GetNodeName(int $joint)
{
    global string $gsJointNames[];
    global int $giActiveJointList[];
    string $lsNode = $gsJointNames[ ( $giActiveJointList[$joint] ) ];
    return $lsNode;
}

//Wow the fwrite function really really stinks.
global proc WriteFrameToTime(int $frameno)
{
    global int $ghFile;
    float $result = FrameToTime($frameno);

    fwrite $ghFile $result;
}

global proc WriteString( string $str )
{
    global int $ghFile;

    int $str_len = `size $str` + 1;

    fwrite $ghFile $str_len;
    fwrite $ghFile $str;
}

global proc WriteMotionForJoint(int $joint, int $num_motions, int $mtype)
{
    global int $ROT;
    global int $ghFile;
    global int $giRange[];
    global float $gfNextPos[], $gfNextRot[];

    int $frame=$giRange[0];
    string $lsNode = GetNodeName($joint);

    fwrite $ghFile $num_motions;                //Write Num of this type of motion for this joint

    print ("Writing " + $num_motions + " motions for " + $lsNode + " type is " + $mtype + "\n");
    for ( $i=0; $i<$num_motions; $i++ )
    {
        int $result[] = FindNextChange ( $lsNode, $frame, $mtype );
        $frame = $result[0];        //Advance frame.

        if ($result[0] == -1 || $result[1] != $mtype)
        {
            print ("SPATTERS something went very wrong!\n");
            return;
        }

        WriteFrameToTime($result[0]);           //Write keyframe time.

        for ( $j=0; $j<3; $j++ )
        {
            if ($mtype == $ROT)                 //Write values for motion by type.
            {
                fwrite $ghFile $gfNextRot[$j];
            }
            else
            {
                fwrite $ghFile $gfNextPos[$j];
            }
        }
    }
}

global proc WriteActiveJoints()
{
    global int $ROT, $POS;
    global string $gsJointNames[];
    global int $giNumActiveJoints, $ghFile;
    global int $giActiveJointRotCount[], $giActiveJointPosCount[], $giActiveJointPriority[];

    print( $giNumActiveJoints + " active joints.\n");
    fwrite $ghFile $giNumActiveJoints;          //Write number of active joints. 

    for ( $i=0; $i < $giNumActiveJoints; $i++)
    {
        WriteString( GetNodeName($i) );     //Lookup name and write to file.
        fwrite $ghFile $giActiveJointPriority[$i];  //Write priority
        WriteMotionForJoint( $i, $giActiveJointRotCount[$i], $ROT);
        WriteMotionForJoint( $i, $giActiveJointPosCount[$i], $POS);
    }
}

global proc WriteConstraints()
{
    global int $ghFile;

    //SPATTERS TODO:   Might be able to do some cool things with constraints but let's skip them for now.

    int $num_constraints = 0;
    fwrite $ghFile $num_constraints;
}
    

global proc WriteHeader()
{
    global int $ghFile, $giPriority,$giLoop[3];
    global float $gfDuration, $gfEase[2];

    string $emote_name = "NNNNNNNNNN";  //SPATTERS TODO figure out what emote names are for.
    int $version = 1;
    int $subversion = 0;

    fwrite $ghFile $version;       //Version
    fwrite $ghFile $subversion;       //Sub version
    fwrite $ghFile $giPriority; //The minimum priority for this animation.
    fwrite $ghFile $gfDuration; //
    WriteString($emote_name);
    WriteFrameToTime($giLoop[0]); //Loop in Frame.
    WriteFrameToTime($giLoop[1]); //Loop out Frame.
    fwrite $ghFile $giLoop[2];              //Looping? T/F
    fwrite $ghFile $gfEase[0];              //Ease in duration in seconds
    fwrite $ghFile $gfEase[1];              //Ease out duration in seconds
    fwrite $ghFile 0;           //Number of hand poses.   Hardcoded 0.  Obsolete as of Bento.
}


////////////////////////////////////////////////////////////////////////////////
//          Interact with UI
////////////////////////////////////////////////////////////////////////////////
//User toggled selected time range.  Enable/disable accordingly and set vals.
global proc TimeRange (int $piTimeRange) {
   global int $giRangeSelect;		//Which joint level to use.
   global string $ghRangeStart, $ghRangeEnd;

   $giRangeSelect = $piTimeRange;
   if ($ghRangeStart != "") {
      intField -edit -enable $piTimeRange $ghRangeStart;
      intField -edit -enable $piTimeRange $ghRangeEnd;
   }
}

//User selected animation looping.
global proc SetLooping (  )
{
    global string $ghLoop[3];
    global int $giLoop[3];

    $giLoop[2] = `checkBox -q -v $ghLoop[2]`;
    intField -edit -enable $giLoop[2] $ghLoop[0];
    intField -edit -enable $giLoop[2] $ghLoop[1];
}

//This routine is activated when the OK button is clicked.
global proc int OnOkay () {
    global int $giNumFrames;            //Number of frames in exported sequence.
    global int $giFPS;                  //FPS of the animated sequence.
    global float $gfDuration;           //Duration of the sequence in seconds
   global string $ghFilename, $ghRangeStart, $ghRangeEnd, $gcMajorMenu, $gcMinorMenu;
    global string $gsRootJoint;
   global int $ghFile;
   global int $giFrameNo;		//Frame number being processed.
   global int $giJointSelect;		//Use toplevel joint as root.
   global int $giRangeSelect;		//Timerange to use.  0=all.  1=selected.
   global int $giRange[2];		//If not using all, use this range.
   global int $giFPS;		//Rate data is sampled at.
   global int $giLoop[3];
   global string $ghFPS, $ghLoop[3];
   string $result;


   $lbAuto=`autoKeyframe -q -st`;	//Get auto keyframing mode.
   autoKeyframe -st false;			//Turn off auto keyframing.

   string $lsNodes[] = `selectedNodes`;		//Get selected nodes.
   string $lsNode = $lsNodes[0];		//Get first node selected.

    $gsRootJoint = FindRootJoint($lsNode);

   if ($giJointSelect ==0) {		//Use the toplevel joint node.
      $lsNode=$gsRootJoint;
   }

   if ($lsNode == "") {				//No selected nodes.
      confirmDialog -title "Information" -message "No nodes selected.  Please select root node before running this script." -button "OK";
      return 0;
   }

   //Get filename from the filename object.
   string $gcFilename = `textField -q -tx $ghFilename`;

//TODO SPATTERS UNCOMMENT WHEN DONE.
/*
   if (`filetest -s $gcFilename`) {
      string $cMsg = "Overwrite " + $gcFilename + "?";

      $result=`confirmDialog -title "Confirm" -message $cMsg -button "Yes" -button "No" -defaultButton "Yes" -cancelButton "No" -dismissString "No"`;

      if ( $result == "No" ) return 0;
   }
*/



    //****************FETCH DATA FROM SCREEN CONTROLS*******************
    $giFPS=`intField -q -v $ghFPS`;  //Get Frames Per Second from UI.

    if ($giRangeSelect == 0) {		//Using full keyed time range.
        $giRange[0]=1;
        $giRange[1]=`findKeyframe -hierarchy below -which last $gsRootJoint`;
    } else {				//Using user-defined time range.
        $giRange[0]=`intField -q -v $ghRangeStart`;
        $giRange[1]=`intField -q -v $ghRangeEnd`;
    }

    //Get Values for looping
    $giLoop[0] = `intField -q -v $ghLoop[0]`;
    $giLoop[1] = `intField -q -v $ghLoop[1]`;
    $giLoop[2] = `checkBox -q -v $ghLoop[2]`;

    if ($giLoop[2] != 0)  //Validate loop behavior.
    {
        if ( $giLoop[0] >= $giLoop[1] )
        {
            confirmDialog -title "Bad Loop" -message "Loop Start Frame must be before Loop End Frame.";
            return 0;
        }
        if ( $giLoop[0] < $giRange[0] || $giLoop[1] > $giRange[1]) 
        {
            confirmDialog -title "Bad Loop" -message "Loop Start time and end frames must be within selected range.";
            return 0;
        }
    }
        
    $giNumFrames = $giRange[1] - $giRange[0];
    $gfDuration  = (float)$giNumFrames/(float)$giFPS;

    RecurseNodeTree ( $lsNode, "StoreJointName");
    int $num_active  = GetActiveJoints();

    print ("Num frames:  " + $giNumFrames + " FPS: " + $giFPS + " Duration: " + $gfDuration + "\n");

    $ghFile=`fopen $gcFilename "w"`;		//Open to write.

    WriteHeader();
    WriteActiveJoints();
    WriteConstraints();

   fclose $ghFile;				//Close the file.

   autoKeyframe -st $lbAuto;			//Restore keyframing mode.

   return 1;
}

//Dismiss writes the user's preferences to a file and destroys the window.
global proc Dismiss() {
   global string $ghWindow;
   global int $giPickRoot;

   if ($giPickRoot==1) {		//If pick mode is set, unset.
      PickRoot();
   }

   WritePrefFile();			//Write preferences.
   deleteUI -window $ghWindow;
}

//SetDir is called when the Pick directory button is pressed.  It takes the
//filename string and parses off the filename, stores that to a temp name,
//and runs the directory command with the current path.
global proc SetDir() {
   global string $ghFilename, $gcFilename, $gcShortFilename;

   $gcFilename = `textField -query -text $ghFilename`;
   string $lcDirName = dirname($gcFilename);

   int $liDirLen =`size $lcDirName`+1;	//Move past last dir character.
   int $liNameLen=`size $gcFilename`;

   string $tmp=`substring $gcFilename $liDirLen $liDirLen`;
   if ($tmp=="\\"||$tmp=="/") {
      $liDirLen++;
   }

   $gcShortFilename=`substring $gcFilename $liDirLen $liNameLen`;
   fileBrowser "GetDir" "Path" "" 4;
}

//Gets directory from pick window, inserts it into filename.
global proc GetDir(string $select_dir,string $dir)
{
   global string $gcFilename, $gcShortFilename, $ghFilename;
   $gcFilename=$select_dir+$gcShortFilename;
//SPATTERS mac only.
   $gcFilename=$select_dir+"/"+$gcShortFilename;
   textField -edit -text $gcFilename $ghFilename;
}

//OnHelp generates a scrollable text window which describes the exporter
//script.
global proc OnHelp() {
   global string $ghHelpWin;

   if (!`window -exists -query $ghHelpWin`) { //Open window if it doesn't exist.
      $ghHelpWin = `window -width 300 -height 200 
                       -title "Export to Anim Help" -iconName "Anim Export Help"`;
   string $txt="First pass of a .anim exporter for Maya.\n\n";
    $txt=$txt+"MEL does not have good tools for binary file creation so this script will need to call an interim-step converter to repackage the data we export into the .anim format.";

   columnLayout -adjustableColumn true;
         scrollField -wordWrap true -editable false -height 600 -nl 1000 -text $txt;
      //button -label "Dismiss" -command ("deleteUI -window $ghHelpWin;");
   }
   showWindow $ghHelpWin;
}
  
$gcMajorMenu="X,Z,Y";
$gcMinorMenu="Z,X,Y";
if (!`window -exists -query $ghWindow`) { //Open window if it doesn't exist.
   ReadPrefFile();			//Read user preferences from last run.
   
   $ghWindow = `window -width 460 -height 260 
                       -title "SecondLife Anim Export" -iconName "Anim  Export"`;
   
   columnLayout hTop;				//Overall window by column
      rowLayout -nc 4 -parent hTop hRow1;	//Row for Root and Range frames.
         frameLayout -borderStyle "etchedIn" -label "Root Joint" 
                     -height 80 -width 100 -parent hRow1 hJointBox;
            columnLayout -parent hJointBox;
               string $hJBC=`radioCollection`;
               string $hJB1=`radioButton -label "Top"     -onCommand ("$giJointSelect=0")`;
               string $hJB2=`radioButton -label "Current" -onCommand ("$giJointSelect=1")`;
               if ($giJointSelect == 0) {
                  radioCollection -edit -select $hJB1 $hJBC;
               } else {
                  radioCollection -edit -select $hJB2 $hJBC;
               }
             
               $ghPickRoot=`button -label "Pick" -command ("PickRoot()")`;
   
   
         frameLayout -borderStyle "etchedIn" -label "Time Range" 
                     -height 80 -width 100 -parent hRow1 hTimeRange;
            columnLayout -parent hTimeRange hTimeRangeCol;
               string $hTRC=`radioCollection`;
               string $hTR1=`radioButton -label "Keyed Range" -onCommand ("TimeRange(0)")`;
               string $hTR2=`radioButton -label "Manual"      -onCommand ("TimeRange(1)")`;
               if ( $giRangeSelect == 0) {
                  radioCollection -edit -select $hTR1 $hTRC;
               } else {
                  radioCollection -edit -select $hTR2 $hTRC;
               }
               rowLayout -nc 3 -cw3 35 30 35 -width 100 
                         -parent hTimeRangeCol hTimeRangeRow;
                  $ghRangeStart= `intField -value $giRange[0] -enable $giRangeSelect -width 30`;
                  text -label " to ";
                  $ghRangeEnd  = `intField -value $giRange[1] -enable $giRangeSelect -width 30`;
   
   
         frameLayout -borderStyle "etchedIn" -label "FPS" 
                     -height 80 -width 100 -parent hRow1 hFPS;
            columnLayout -parent hFPS;
               $ghFPS = `intField -min 1 -value $giFPS`;

        frameLayout -borderStyle "etchedIn" -label "Looping"
                    -height 80 -width 180 -parent hRow1 hLoop;
            columnLayout -parent hLoop;
                $ghLoop[2] = `checkBox -label "Loop" -value $giLoop[2] -onCommand("SetLooping()")`;
                rowLayout -nc 2 -width 180 -parent hLoop hLoop1;
                    text -label "Start Frame: "; 
                    $ghLoop[0] =  `intField -value $giLoop[0] -enable $giLoop[2]`;
                rowLayout -nc 2 -width 180 -parent hLoop hLoop2;
                    text -label "End Frame: ";
                    $ghLoop[1] =  `intField -value $giLoop[1] -enable $giLoop[2]`;
   
   
      rowLayout -nc 2 -parent hTop hRow2;		//Row for translations.
         frameLayout -borderStyle "etchedIn" -label "Base Adjustment" 
                     -width 380 -parent hRow2 hBaseAdj;
            columnLayout -parent hBaseAdj hBaseAdjC;
               rowLayout -parent hBaseAdjC; 
                  $ghTranslate = `radioButtonGrp -numberOfRadioButtons 2 
                                                 -label "Translation:  "
                                                 -labelArray2 "World" "Object"
                                                 -select $giBaseTranslation`;
               rowLayout -parent hBaseAdjC; 
                  $ghRotate    = `radioButtonGrp -numberOfRadioButtons 2 
                                                 -label "Rotation:  "
                                                 -labelArray2 "World" "Object"
                                                 -select $giBaseRotation`;

        //The Axis rotate order panel.
        frameLayout -borderStyle "etchedIn" -width 380 -label "Rotate Order"
                 -parent hTop hRotateOrder;
            rowLayout -nc 4 -parent hRotateOrder hRotSub;
            text -label " Major Axis" -parent hRotSub;
            frameLayout -width 50 -labelVisible false -parent hRotSub hMajor; 
               menuBarLayout -width 10;// -parent hRotateOrder;
                  menu -label $gcMajorMenu hMajorMenu;
                     menuItem -label "X,Y,Z" -command("menu -e -label \"X,Y,Z\" hMajorMenu");
                     menuItem -label "X,Z,Y" -command("menu -e -label \"X,Z,Y\" hMajorMenu");
                     menuItem -label "Y,X,Z" -command("menu -e -label \"Y,X,Z\" hMajorMenu");
                     menuItem -label "Y,Z,X" -command("menu -e -label \"Y,Z,X\" hMajorMenu");
                     menuItem -label "Z,X,Y" -command("menu -e -label \"Z,X,Y\" hMajorMenu");
                     menuItem -label "Z,Y,X" -command("menu -e -label \"Z,Y,X\" hMajorMenu");
            text -label "Minor Axis" -parent hRotSub;
            frameLayout -width 50 -labelVisible false -parent hRotSub hMinor;
               menuBarLayout -width 10;
                  menu -label $gcMinorMenu hMinorMenu;
                     menuItem -label "X,Y,Z" -command("menu -e -label \"X,Y,Z\" hMinorMenu");
                     menuItem -label "X,Z,Y" -command("menu -e -label \"X,Z,Y\" hMinorMenu");
                     menuItem -label "Y,X,Z" -command("menu -e -label \"Y,X,Z\" hMinorMenu");
                     menuItem -label "Y,Z,X" -command("menu -e -label \"Y,Z,X\" hMinorMenu");
                     menuItem -label "Z,X,Y" -command("menu -e -label \"Z,X,Y\" hMinorMenu");
                     menuItem -label "Z,Y,X" -command("menu -e -label \"Z,Y,X\" hMinorMenu");
   
      //The File name panel.
      frameLayout -borderStyle "etchedIn" -width 380 -labelVisible false 
                  -parent hTop hFileDia;
         rowLayout -nc 3 -cw3 60 270 50 -parent hFileDia;
            text -label "Filename" -width 50;
            $ghFilename = `textField -text $gcFilename -width 265`;
            button -label " Path" -width 50 -align right 
                   -command ("SetDir();") "Path";
      
      //The Command button panel.
      frameLayout -borderStyle "etchedIn" -labelVisible false 
                  -parent hTop -width 380;
         rowLayout -nc 4;
            button -label "Okay" -command ("if (OnOkay()) Dismiss();") "Okay";
            button -label "Apply" -command ("OnOkay()") "Apply";
            button -label "Help" -command ("OnHelp()") "Help";
            button -label "Dismiss" -command ("Dismiss();") "Dismiss";
      setParent ..;
}
showWindow $ghWindow;
