/*  
File:          SecondLife Anim Translator
Author:        Samantha Patterson
Last Updated:  2016-02-12

Copyright (C) 2016-2021 by Samantha Patterson <circle(at)deeptht(dot)armory(dot)com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

/* Maya's MEL scripting language lacks some functionality to easily generate
the file format used internally by SecondLife for animations.  This 
program translates an intermediate format generated by MEL into the 
destination format.*/

#include <iostream>
#include <cstdio>
#include <fstream>
#include <vector>
#include <math.h>

using namespace std;

typedef unsigned short      U16;
typedef unsigned int        U32;
typedef float               F32;
typedef double              F64;

const U16 U16MAX = 0xFFFF;

//Not going to do much in the way of error checking in this program.
//You're on your own.

//Clamp to a range
F64 clamp(F64 val, F64 low, F64 high)
{
    if (val<low) return low;
    if (val>high) return high;
    return val;
}

//What's a little loss of precision amoung friends?
U16 F64_to_U16(F64 val, F64 lower, F64 upper)
{
    val = clamp(val, lower, upper);

    val -= lower;
    val /= (upper - lower);

    // return the U16
    return (U16)(floor(val*U16MAX));
}

//The header portion of the input file.
class SLANIM
{
    public:
        SLANIM(FILE *in, FILE *out) { mIn = in; mOut = out; }
        void process();

    private:
        void processJoints();
        void processJointMotions( F64 min, F64 max );
        void processConstraints();
        void read();
        void write();

    private: 
        U32 mVersion;
        U32 mSubversion;
        U32 mPriority;          //Technically signed but for read/write doesn't matter.
        F64 mDuration;
        U32 mEmote_len;
        char mEmote_name[255];
        F64 mLoop_time[2];
        U32 mLoop;              //Sure sure.  32bits for a bool and 16 bits for floats.
        F64 mEase_time[2];
        U32 mHand_poses;
        U32 mNum_motions;
        FILE *mIn;
        FILE *mOut;
};

void SLANIM::read()
{
    //Get the general header data for the animation.
    fread( &mVersion,     sizeof(U32) , 1, mIn );
    fread( &mSubversion,  sizeof(U32) , 1, mIn );
    fread( &mPriority,    sizeof(U32) , 1, mIn );
    fread( &mDuration,    sizeof(F64) , 1, mIn );
    fread( &mEmote_len,   sizeof(U32) , 1, mIn );
    fread( mEmote_name,   sizeof (char), mEmote_len+1, mIn ); 
    fread( &mLoop_time,   sizeof(F64) , 2, mIn );
    fread( &mLoop,        sizeof(U32) , 1, mIn );
    fread( &mEase_time,   sizeof(F64) , 2, mIn );
    fread( &mHand_poses,   sizeof(U32) , 1, mIn );
    fread( &mNum_motions, sizeof(U32) , 1, mIn );

}

void SLANIM::write()
{
    //The implicit conversions here will haunt my nightmares for weeks.
    //Who needs to cast when you can truncate with fwrite!
    fwrite( &mVersion,     sizeof(U16), 1, mOut );
    fwrite( &mSubversion,  sizeof(U16), 1, mOut );
    fwrite( &mDuration,    sizeof(U32), 1, mOut );
    fwrite( &mEmote_len,   sizeof(U32), 1, mOut );
    fwrite( mEmote_name,  sizeof(char), mEmote_len, mOut );
    fwrite( &mLoop_time[0], sizeof(F32), 1, mOut );
    fwrite( &mLoop_time[1], sizeof(F32), 1, mOut );
    fwrite( &mLoop,        sizeof(U32), 1, mOut );      //There's the bool again.
    fwrite( &mEase_time[0], sizeof(F32), 1, mOut );
    fwrite( &mEase_time[1], sizeof(F32), 1, mOut );
    fwrite( &mHand_poses,  sizeof(U32), 1, mOut );
    fwrite( &mNum_motions,   sizeof(U32), 1, mOut );
}

void SLANIM::processJointMotions(F64 min, F64 max)
{
    U32 num_keys;

    //Read/write number of keys
    fread( &num_keys, sizeof(U32), 1, mIn );
    fwrite( &num_keys, sizeof(U32), 1, mOut );

    for ( int i = 0;   i < num_keys;   ++i )
    {
        F64 vals[4];    //Time, X, Y, and Z all come in as F64 and go out as u16s

        fread(&vals, sizeof(F64), 4, mIn );

        //Time index of the keyframe is clamped between 0 and duration of animation. 
        U16 v = F64_to_U16(vals[0], 0.0, mDuration);
        fwrite ( &v, sizeof(U16), 1, mOut );

        for ( int j = 1;   j < 4;   ++j )
        {
            v =  F64_to_U16(vals[j], min, max);
            fwrite ( &v, sizeof(U16), 1, mOut );
        }
    }
}

void SLANIM::processJoints()
{
    for ( int i=0;   i < mNum_motions;   ++i )
    {
        U32 slen;
        char name[255];
        U32 priority;
        
        fread( &slen, sizeof(U32), 1, mIn );
        fread( name,  sizeof(char), slen+1, mIn );
        fread( &priority, sizeof(U32), 1, mIn );

        fwrite( &slen, sizeof(U32), 1, mOut );
        fwrite( name, sizeof(char), slen, mOut );
        fwrite( &priority, sizeof(U32), 1, mOut );

        processJointMotions(-1.0, 1.0); //Rotations
        processJointMotions(-5.0, 5.0); //Positions
    }
}

void SLANIM::processConstraints()
{
    //SPATTERS TODO:  Constraints not yet implemented. 
    U32 num_constraints=0;
    fwrite( &num_constraints, sizeof(U32), 1, mOut );
}

void SLANIM::process()
{
    read();
    write();

    processJoints();
    processConstraints();
}

int main(int argc, char **argv)
{

    if (argc != 3)
    {
        cout << "Please supply SRC and DEST file names.\n" << endl; 
        return 0;
    }

    FILE* in = fopen(argv[1], "rb");
    FILE* out = fopen(argv[1], "wb");

    SLANIM inhdr (in, out);

    inhdr.process();

    fclose(in);
    fclose(out);
}
